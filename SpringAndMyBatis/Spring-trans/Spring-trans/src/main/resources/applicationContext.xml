<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--引入数据库属性配置信息文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--申明数据源，作用是连接数据库，代替mybatis中的数据源-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供连接数据库的信息-->
        <!--使用${jdbc.url}key值对数据连接进行赋值-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--创建sqlSessionFactory类并给其赋值-->
    <bean id="SessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--创建dao对象使用sqlSession的get(StudentDao.class)
        mapperScannerConfigurer:在内部调用getMapper（）生成每个dao接口的代理对象；
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="SessionFactory"/>
        <!--指定包名，包名时dao接口所在的包名
            mapperScannerConfigurer会扫描这个包中所有接口，把每个接口都执行一遍getMapper()方法得到每个接口的dao对象。
            创建好的dao对象放入到spring容器中。dao对象的默认名称时首字母小写的类名；
        -->
        <property name="basePackage" value="dao"/>
    </bean>
    <!--声明事务管理器类-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--连接数据库，指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--开启事务注解，告诉spring使用注解进行事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--声明业务方法的事务属性-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--tx:method给具体的方法配置事务属性
                name为方法名称：不带包名类名的完整方法名；
                              可以使用通配符*表示任意字符；
            -->
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>
    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类需要使用事务
            id：切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类需要事务，aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：关联advice和pointcut
            advice-ref：通知，上面tx：advice那里的配置；
            pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
    <context:component-scan base-package="org.example.service.impl"/>

</beans>